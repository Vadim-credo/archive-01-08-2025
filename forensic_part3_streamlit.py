# =============================================================================
    # STREAMLIT –Ü–ù–¢–ï–†–§–ï–ô–° (–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô)
    # =============================================================================
    
    @staticmethod
    @st.cache_resource
    def get_agent_instance(**kwargs):
        """–ö–µ—à–æ–≤–∞–Ω–∏–π singleton –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Streamlit"""
        return ForensicArchiveAgent(**kwargs)
    
    @staticmethod
    @st.cache_data(ttl=300)  # –ö–µ—à –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    def get_cached_statistics(agent):
        """–ö–µ—à–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        return agent.get_search_statistics()
    
    @staticmethod
    @st.cache_data(ttl=60)  # –ö–µ—à –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
    def get_cached_search_results(agent, **search_params):
        """–ö–µ—à–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É"""
        return agent.search_documents(**search_params)

def create_streamlit_interface():
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ Streamlit —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    """
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    st.set_page_config(
        page_title="üîç –ê—Ä—Ö—ñ–≤ —Å—É–¥–æ–≤–∏—Ö –µ–∫—Å–ø–µ—Ä—Ç–∏–∑",
        page_icon="üîç",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    st.title("üîç AI-–ê–≥–µ–Ω—Ç –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –∞—Ä—Ö—ñ–≤—É —Å—É–¥–æ–≤–∏—Ö –µ–∫—Å–ø–µ—Ä—Ç–∏–∑")
    st.markdown("---")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
    initialize_session_state()
    
    # –°–∞–π–¥–±–∞—Ä –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    setup_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    main_interface()

def initialize_session_state():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é"""
    
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if 'agent' not in st.session_state:
        st.session_state.agent = None
    
    if 'current_mode' not in st.session_state:
        st.session_state.current_mode = "üîç –ü–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"
    
    if 'search_results' not in st.session_state:
        st.session_state.search_results = None
    
    if 'last_search_params' not in st.session_state:
        st.session_state.last_search_params = {}
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
    if 'archive_settings' not in st.session_state:
        st.session_state.archive_settings = {
            'db_path': 'forensic_archive.db',
            'archive_folder': 'archive',
            'existing_archive_path': '',
            'index_only_mode': False
        }
    
    # –°—Ç–∞–Ω –æ–ø–µ—Ä–∞—Ü—ñ–π
    if 'operation_in_progress' not in st.session_state:
        st.session_state.operation_in_progress = False
    
    if 'operation_results' not in st.session_state:
        st.session_state.operation_results = {}

def setup_sidebar():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∞–π–¥–±–∞—Ä—É –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏"""
    
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        st.session_state.current_mode = st.selectbox(
            "–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:",
            [
                "üîç –ü–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤",
                "üìÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", 
                "üìÇ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É",
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ–∑",
                "üõ†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
            ],
            index=0
        )
        
        st.markdown("---")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
        setup_archive_settings()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
        setup_agent_initialization()
        
        # –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        display_system_info()

def setup_archive_settings():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∞—Ä—Ö—ñ–≤—É"""
    
    st.subheader("üóÇÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞—Ä—Ö—ñ–≤—É")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
    st.session_state.archive_settings['db_path'] = st.text_input(
        "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:",
        value=st.session_state.archive_settings['db_path'],
        help="–®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite"
    )
    
    # –ü–∞–ø–∫–∞ –∞—Ä—Ö—ñ–≤—É
    st.session_state.archive_settings['archive_folder'] = st.text_input(
        "–ü–∞–ø–∫–∞ –∞—Ä—Ö—ñ–≤—É:",
        value=st.session_state.archive_settings['archive_folder'],
        help="–ü–∞–ø–∫–∞ –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∞—Ä—Ö—ñ–≤—É"
    )
    
    # –Ü—Å–Ω—É—é—á–∏–π –∞—Ä—Ö—ñ–≤
    st.session_state.archive_settings['existing_archive_path'] = st.text_input(
        "–Ü—Å–Ω—É—é—á–∏–π –∞—Ä—Ö—ñ–≤:",
        value=st.session_state.archive_settings['existing_archive_path'],
        help="–®–ª—è—Ö –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞—Ä—Ö—ñ–≤—É –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è"
    )
    
    # –†–µ–∂–∏–º —Ç—ñ–ª—å–∫–∏ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è
    st.session_state.archive_settings['index_only_mode'] = st.checkbox(
        "–¢—ñ–ª—å–∫–∏ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)",
        value=st.session_state.archive_settings['index_only_mode'],
        help="–Ü–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –±–µ–∑ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
    )

def setup_agent_initialization():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"""
    
    st.subheader("ü§ñ –°—Ç–∞–Ω –∞–≥–µ–Ω—Ç–∞")
    
    # –ö–Ω–æ–ø–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó/–ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if st.button("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞", use_container_width=True):
        with st.spinner("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞..."):
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
                st.session_state.agent = ForensicArchiveAgent.get_agent_instance(
                    **st.session_state.archive_settings
                )
                st.success("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!")
                
                # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                if 'search_results' in st.session_state:
                    st.session_state.search_results = None
                
            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {str(e)}")
                st.session_state.agent = None
    
    # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—É –∞–≥–µ–Ω—Ç–∞
    if st.session_state.agent is not None:
        st.success("üü¢ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        
        # –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if st.button("üìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            display_quick_stats()
    else:
        st.warning("üü° –ê–≥–µ–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")

def display_system_info():
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    
    st.markdown("---")
    st.subheader("üíª –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
    libs_status = []
    if WIN32_AVAILABLE:
        libs_status.append("‚úÖ WIN32COM")
    else:
        libs_status.append("‚ùå WIN32COM")
    
    if PDF_AVAILABLE:
        libs_status.append("‚úÖ PDF")
    else:
        libs_status.append("‚ùå PDF")
    
    if PSUTIL_AVAILABLE:
        libs_status.append("‚úÖ PSUTIL")
    else:
        libs_status.append("‚ùå PSUTIL")
    
    st.write("**–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:**")
    for status in libs_status:
        st.write(status)
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–µ—à
    if os.path.exists(CACHE_DIR):
        cache_files = len([f for f in os.listdir(CACHE_DIR) if f.endswith('.pkl')])
        st.write(f"**–§–∞–π–ª—ñ–≤ –∫–µ—à—É:** {cache_files}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à", use_container_width=True):
        clear_cache()

def clear_cache():
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–µ—à—ñ–≤"""
    try:
        # –û—á–∏—â–µ–Ω–Ω—è Streamlit –∫–µ—à—É
        st.cache_data.clear()
        st.cache_resource.clear()
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–µ—à—É
        if os.path.exists(CACHE_DIR):
            import shutil
            shutil.rmtree(CACHE_DIR)
            os.makedirs(CACHE_DIR, exist_ok=True)
        
        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∞–≥–µ–Ω—Ç–∞
        if st.session_state.agent:
            st.session_state.agent.search_cache.clear()
            st.session_state.agent.file_scan_cache.clear()
            st.session_state.agent.cache_timestamps.clear()
        
        st.success("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω–æ!")
        
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: {e}")

def display_quick_stats():
    """–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    if not st.session_state.agent:
        return
    
    try:
        stats = ForensicArchiveAgent.get_cached_statistics(st.session_state.agent)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üìÑ –í—Å—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", stats.get('total_records', 0))
        
        with col2:
            if stats.get('by_year'):
                latest_year = max(stats['by_year'].keys())
                st.metric("üìÖ –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫", latest_year)
        
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main_interface():
    """–û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É"""
    
    if not st.session_state.agent:
        st.warning("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä—ñ")
        return
    
    mode = st.session_state.current_mode
    
    if mode == "üîç –ü–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤":
        search_interface()
    elif mode == "üìÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤":
        add_documents_interface()
    elif mode == "üìÇ –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É":
        scan_archive_interface()
    elif mode == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ–∑":
        statistics_interface()
    elif mode == "üõ†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏":
        settings_interface()

def search_interface():
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    
    st.header("üîç –ü–æ—à—É–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
    
    # –§–æ—Ä–º–∞ –ø–æ—à—É–∫—É
    with st.form("search_form"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            erddr_number = st.text_input("‚Ññ –Ñ–†–î–†", help="11-12 —Ü–∏—Ñ—Ä")
            expertise_number = st.text_input("‚Ññ –ï–∫—Å–ø–µ—Ä—Ç–∏–∑–∏", help="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 123/2024")
            expertise_date = st.date_input("–î–∞—Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏", value=None)
        
        with col2:
            expertise_year = st.number_input(
                "–†—ñ–∫", 
                min_value=2000, 
                max_value=datetime.now().year + 1,
                value=None,
                step=1
            )
            expert_name = st.text_input("–Ü–º'—è –µ–∫—Å–ø–µ—Ä—Ç–∞", help="–ß–∞—Å—Ç–∫–æ–≤–∏–π –ø–æ—à—É–∫")
            expertise_type = st.selectbox(
                "–¢–∏–ø –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏",
                ["–í—Å—ñ", "–ø–æ—á–µ—Ä–∫–æ–∑–Ω–∞–≤—á–∞", "–∑–±—Ä–æ—ó", "—Ç—Ä–∞—Å–æ–ª–æ–≥—ñ—á–Ω–∞", "–¥–∞–∫—Ç–∏–ª–æ—Å–∫–æ–ø—ñ—á–Ω–∞", "–±–∞–ª. –æ–±–ª—ñ–∫"],
                index=0
            )
        
        with col3:
            sector = st.selectbox(
                "–°–µ–∫—Ç–æ—Ä",
                ["–í—Å—ñ", "–ø–æ—á–µ—Ä–∫ —Ç–∞ –¢–ï–î", "–±–∞–ª—ñ—Å—Ç–∏", "—Ç—Ä–∞—Å–æ–ª–æ–≥—ñ—è", "–¥–∞–∫—Ç–∏–ª–æ—Å–∫–æ–ø—ñ—è", "–±–∞–ª. –æ–±–ª—ñ–∫"],
                index=0
            )
            limit = st.number_input("–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤", min_value=10, max_value=10000, value=1000)
            use_cache = st.checkbox("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–µ—à", value=True)
        
        search_button = st.form_submit_button("üîç –®—É–∫–∞—Ç–∏", use_container_width=True)
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
    if search_button:
        search_params = {
            'erddr_number': erddr_number if erddr_number else None,
            'expertise_number': expertise_number if expertise_number else None,
            'expertise_date': expertise_date.strftime('%d.%m.%Y') if expertise_date else None,
            'expertise_year': expertise_year if expertise_year else None,
            'expert_name': expert_name if expert_name else None,
            'expertise_type': expertise_type if expertise_type != "–í—Å—ñ" else None,
            'sector': sector if sector != "–í—Å—ñ" else None,
            'limit': limit,
            'use_cache': use_cache
        }
        
        with st.spinner("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É..."):
            try:
                results = ForensicArchiveAgent.get_cached_search_results(
                    st.session_state.agent, **search_params
                )
                st.session_state.search_results = results
                st.session_state.last_search_params = search_params
                
            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
                st.session_state.search_results = None
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    display_search_results()

def display_search_results():
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é"""
    
    if st.session_state.search_results is None:
        return
    
    results = st.session_state.search_results
    
    if results.empty:
        st.info("‚ÑπÔ∏è –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        return
    
    st.markdown("---")
    st.subheader(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É ({len(results)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤)")
    
    # –§—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    with st.expander("üîß –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # –§—ñ–ª—å—Ç—Ä –ø–æ –µ–∫—Å–ø–µ—Ä—Ç—É
            experts = ["–í—Å—ñ"] + sorted(results['expert_name'].dropna().unique().tolist())
            selected_expert = st.selectbox("–ï–∫—Å–ø–µ—Ä—Ç:", experts)
        
        with col2:
            # –§—ñ–ª—å—Ç—Ä –ø–æ —Å–µ–∫—Ç–æ—Ä—É
            sectors = ["–í—Å—ñ"] + sorted(results['sector'].dropna().unique().tolist())
            selected_sector = st.selectbox("–°–µ–∫—Ç–æ—Ä:", sectors)
        
        with col3:
            # –§—ñ–ª—å—Ç—Ä –ø–æ —Ä–æ–∫—É
            years = ["–í—Å—ñ"] + sorted(results['expertise_year'].dropna().unique().tolist(), reverse=True)
            selected_year = st.selectbox("–†—ñ–∫:", [str(y) if isinstance(y, int) else y for y in years])
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    filtered_results = results.copy()
    
    if selected_expert != "–í—Å—ñ":
        filtered_results = filtered_results[filtered_results['expert_name'] == selected_expert]
    
    if selected_sector != "–í—Å—ñ":
        filtered_results = filtered_results[filtered_results['sector'] == selected_sector]
    
    if selected_year != "–í—Å—ñ":
        filtered_results = filtered_results[filtered_results['expertise_year'] == int(selected_year)]
    
    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    display_paginated_results(filtered_results)

def display_paginated_results(results):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é"""
    
    if results.empty:
        st.info("‚ÑπÔ∏è –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
        return
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    items_per_page = st.selectbox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:", [10, 25, 50, 100], index=1)
    total_pages = (len(results) - 1) // items_per_page + 1
    
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 1
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", disabled=st.session_state.current_page <= 1):
            st.session_state.current_page -= 1
    
    with col2:
        st.session_state.current_page = st.number_input(
            f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ (–∑ {total_pages}):",
            min_value=1,
            max_value=total_pages,
            value=st.session_state.current_page,
            step=1
        )
    
    with col3:
        if st.button("–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", disabled=st.session_state.current_page >= total_pages):
            st.session_state.current_page += 1
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_idx = (st.session_state.current_page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_results = results.iloc[start_idx:end_idx]
    
    # –í–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    display_format = st.radio(
        "–§–æ—Ä–º–∞—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
        ["üìã –¢–∞–±–ª–∏—Ü—è", "üìÑ –ö–∞—Ä—Ç–∫–∏", "üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥"],
        horizontal=True
    )
    
    if display_format == "üìã –¢–∞–±–ª–∏—Ü—è":
        display_table_format(page_results)
    elif display_format == "üìÑ –ö–∞—Ä—Ç–∫–∏":
        display_card_format(page_results)
    else:
        display_detailed_format(page_results)
    
    # –ö–Ω–æ–ø–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
    st.markdown("---")
    display_export_options(results)

def display_table_format(results):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–∞–±–ª–∏—Ü—ñ"""
    
    # –í–∏–±—ñ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    available_columns = [
        'erddr_number', 'expertise_number', 'expertise_date', 'expertise_year',
        'expertise_type', 'expert_name', 'sector', 'source_file'
    ]
    
    selected_columns = st.multiselect(
        "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
        available_columns,
        default=['erddr_number', 'expertise_number', 'expertise_date', 'expert_name', 'sector'],
        help="–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —è–∫—ñ —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ"
    )
    
    if selected_columns:
        display_df = results[selected_columns].copy()
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if 'expertise_date' in display_df.columns:
            display_df['expertise_date'] = display_df['expertise_date'].fillna('–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.dataframe(
            display_df,
            use_container_width=True,
            height=600,
            column_config={
                "erddr_number": st.column_config.TextColumn("‚Ññ –Ñ–†–î–†"),
                "expertise_number": st.column_config.TextColumn("‚Ññ –ï–∫—Å–ø–µ—Ä—Ç–∏–∑–∏"),
                "expertise_date": st.column_config.TextColumn("–î–∞—Ç–∞"),
                "expertise_year": st.column_config.NumberColumn("–†—ñ–∫"),
                "expertise_type": st.column_config.TextColumn("–¢–∏–ø"),
                "expert_name": st.column_config.TextColumn("–ï–∫—Å–ø–µ—Ä—Ç"),
                "sector": st.column_config.TextColumn("–°–µ–∫—Ç–æ—Ä"),
                "source_file": st.column_config.TextColumn("–§–∞–π–ª")
            }
        )

def display_card_format(results):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –∫–∞—Ä—Ç–æ–∫"""
    
    for idx, row in results.iterrows():
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–∫–∏
                title = f"üìÑ {safe_get_value(row, 'source_file')}"
                st.subheader(title)
                
                # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                col_info1, col_info2 = st.columns(2)
                
                with col_info1:
                    st.write(f"**‚Ññ –Ñ–†–î–†:** {safe_get_value(row, 'erddr_number')}")
                    st.write(f"**‚Ññ –ï–∫—Å–ø–µ—Ä—Ç–∏–∑–∏:** {safe_get_value(row, 'expertise_number')}")
                    st.write(f"**–î–∞—Ç–∞:** {safe_get_value(row, 'expertise_date')}")
                
                with col_info2:
                    st.write(f"**–¢–∏–ø:** {safe_get_value(row, 'expertise_type')}")
                    st.write(f"**–ï–∫—Å–ø–µ—Ä—Ç:** {safe_get_value(row, 'expert_name')}")
                    st.write(f"**–°–µ–∫—Ç–æ—Ä:** {safe_get_value(row, 'sector')}")
            
            with col2:
                # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
                if st.button(f"üëÅÔ∏è –î–µ—Ç–∞–ª—ñ", key=f"details_{idx}"):
                    display_document_details(row)
                
                if st.button(f"üìÅ –í—ñ–¥–∫—Ä–∏—Ç–∏", key=f"open_{idx}"):
                    open_document_file(row)
            
            st.markdown("---")

def display_detailed_format(results):
    """–î–µ—Ç–∞–ª—å–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
    
    selected_doc = st.selectbox(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        range(len(results)),
        format_func=lambda x: f"{safe_get_value(results.iloc[x], 'source_file')} - {safe_get_value(results.iloc[x], 'expertise_number')}"
    )
    
    if selected_doc is not None:
        document = results.iloc[selected_doc]
        display_document_details(document)

def display_document_details(document):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**ID:** {safe_get_value(document, 'id')}")
        st.write(f"**–§–∞–π–ª:** {safe_get_value(document, 'source_file')}")
        st.write(f"**–®–ª—è—Ö:** {safe_get_value(document, 'file_path')}")
        st.write(f"**–†–æ–∑–º—ñ—Ä:** {safe_get_value(document, 'file_size')} –±–∞–π—Ç")
        st.write(f"**‚Ññ –Ñ–†–î–†:** {safe_get_value(document, 'erddr_number')}")
        st.write(f"**‚Ññ –ï–∫—Å–ø–µ—Ä—Ç–∏–∑–∏:** {safe_get_value(document, 'expertise_number')}")
    
    with col2:
        st.write(f"**–î–∞—Ç–∞:** {safe_get_value(document, 'expertise_date')}")
        st.write(f"**–†—ñ–∫:** {safe_get_value(document, 'expertise_year')}")
        st.write(f"**–¢–∏–ø:** {safe_get_value(document, 'expertise_type')}")
        st.write(f"**–ï–∫—Å–ø–µ—Ä—Ç:** {safe_get_value(document, 'expert_name')}")
        st.write(f"**–°–µ–∫—Ç–æ—Ä:** {safe_get_value(document, 'sector')}")
        st.write(f"**–°—Ç–≤–æ—Ä–µ–Ω–æ:** {safe_get_value(document, 'created_at')}")
    
    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    col_btn1, col_btn2, col_btn3 = st.columns(3)
    
    with col_btn1:
        if st.button("üìÅ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª", use_container_width=True):
            open_document_file(document)
    
    with col_btn2:
        if st.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É", use_container_width=True):
            show_in_explorer(document)
    
    with col_btn3:
        if st.button("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", use_container_width=True):
            edit_document(document)

def display_export_options(results):
    """–û–ø—Ü—ñ—ó –µ–∫—Å–ø–æ—Ä—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    
    st.subheader("üì§ –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –ï–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            export_to_excel(results)
    
    with col2:
        if st.button("üìÑ –ï–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
            export_to_csv(results)
    
    with col3:
        if st.button("üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ –±—É—Ñ–µ—Ä", use_container_width=True):
            copy_to_clipboard(results)

def open_document_file(document):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    file_path = safe_get_value(document, 'file_path')
    
    if file_path and file_path != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
        try:
            if os.path.exists(file_path):
                import subprocess
                if os.name == 'nt':  # Windows
                    subprocess.run(['start', '', file_path], shell=True, check=True)
                else:  # Linux/Mac
                    subprocess.run(['xdg-open', file_path], check=True)
                st.success(f"‚úÖ –§–∞–π–ª –≤—ñ–¥–∫—Ä–∏—Ç–æ: {os.path.basename(file_path)}")
            else:
                st.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")

def show_in_explorer(document):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–∞–π–ª –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É"""
    file_path = safe_get_value(document, 'file_path')
    
    if file_path and file_path != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
        try:
            if os.path.exists(file_path):
                import subprocess
                if os.name == 'nt':  # Windows
                    subprocess.run(['explorer', '/select,', file_path], check=True)
                else:  # Linux/Mac
                    folder_path = os.path.dirname(file_path)
                    subprocess.run(['xdg-open', folder_path], check=True)
                st.success("‚úÖ –§–∞–π–ª –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ–≤—ñ–¥–Ω–∏–∫—É")
            else:
                st.error(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ")

def edit_document(document):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    st.info("üîß –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")

def export_to_excel(results):
    """–ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ Excel"""
    try:
        from io import BytesIO
        import pandas as pd
        
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            results.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É', index=False)
        
        excel_data = output.getvalue()
        
        st.download_button(
            label="üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel —Ñ–∞–π–ª",
            data=excel_data,
            file_name=f"forensic_search_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Excel: {str(e)}")

def export_to_csv(results):
    """–ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ CSV"""
    try:
        csv_data = results.to_csv(index=False, encoding='utf-8-sig')
        
        st.download_button(
            label="üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV —Ñ–∞–π–ª",
            data=csv_data,
            file_name=f"forensic_search_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
        
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –≤ CSV: {str(e